from typing import List, Optional

from app.adapters.vulnerability_repository import VulnerabilityRepository
from app.models.models import Vulnerability


class VulnerabilityService:
    def __init__(self, repository: VulnerabilityRepository):
        self.repository = repository

    def get_vulnerability(self, cve: str) -> Vulnerability:
        vulnerability = self.repository.get_by_cve(cve)
        if not vulnerability:
            raise ValueError("Vulnerability not found")
        return vulnerability

    def get_vulnerabilities(self, title: Optional[str], min_criticality: Optional[int], max_criticality: Optional[int]) -> List[Vulnerability]:
        vulnerabilities = self.repository.get_all(
            title, min_criticality, max_criticality)
        if not vulnerabilities:
            raise ValueError("No vulnerabilities found")
        return vulnerabilities

    def create_vulnerability(self, vulnerability: Vulnerability) -> Vulnerability:
        return self.repository.create(vulnerability)

    def delete_vulnerability(self, cve: str) -> Vulnerability:
        vulnerability = self.repository.delete(cve)
        if not vulnerability:
            raise ValueError("Vulnerability not found")
        return vulnerability
