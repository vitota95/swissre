from typing import List, Optional

from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from app.adapters.redis_repository import RedisRepository
from app.adapters.vulnerability_repository import VulnerabilityRepository
from app.models.configurations import RedisConfiguration
from app.models.models import Vulnerability

Base = declarative_base()


class VulnerabilityModel(Base):
    __tablename__ = "vulnerabilities"

    cve = Column(String, primary_key=True)
    title = Column(String, nullable=False)
    description = Column(String, nullable=True)
    criticality = Column(Integer, nullable=False)


class PostgresRepository(VulnerabilityRepository):
    def __init__(self, database_url: str, redis_config: RedisConfiguration):
        self.engine = create_engine(database_url)
        self.Session = sessionmaker(bind=self.engine)
        Base.metadata.create_all(self.engine)
        self.redis_repository = RedisRepository(redis_config)

    def create(self, vulnerability: Vulnerability) -> Vulnerability:
        session = self.Session()
        try:
            if session.query(VulnerabilityModel).filter_by(cve=vulnerability.cve).first():
                raise ValueError("Vulnerability with this CVE already exists")
            vulnerability_model = VulnerabilityModel(
                cve=vulnerability.cve,
                title=vulnerability.title,
                description=vulnerability.description,
                criticality=vulnerability.criticality,
            )
            session.add(vulnerability_model)
            session.commit()

            self.redis_repository.add_vulnerability(vulnerability)

            return vulnerability
        finally:
            session.close()

    def get_all(
        self, title: Optional[str], min_criticality: Optional[int], max_criticality: Optional[int]
    ) -> List[Vulnerability]:
        redis_results = self.redis_repository.search_vulnerabilities(
            title=title, min_criticality=min_criticality, max_criticality=max_criticality
        )
        if redis_results:
            return redis_results

        session = self.Session()
        try:
            query = session.query(VulnerabilityModel)
            if title:
                query = query.filter(
                    VulnerabilityModel.title.ilike(f"%{title}%"))
            if min_criticality is not None:
                query = query.filter(
                    VulnerabilityModel.criticality >= min_criticality)
            if max_criticality is not None:
                query = query.filter(
                    VulnerabilityModel.criticality <= max_criticality)

            results = query.all()
            return [
                Vulnerability(
                    cve=v.cve,
                    title=v.title,
                    description=v.description,
                    criticality=v.criticality,
                )
                for v in results
            ]
        finally:
            session.close()

    def get_by_cve(self, cve: str) -> Optional[Vulnerability]:
        redis_result = self.redis_repository.get_by_cve(cve)
        if redis_result:
            return redis_result

        session = self.Session()
        try:
            vulnerability_model = session.query(
                VulnerabilityModel).filter_by(cve=cve).first()
            if not vulnerability_model:
                return None
            vulnerability = Vulnerability(
                cve=vulnerability_model.cve,
                title=vulnerability_model.title,
                description=vulnerability_model.description,
                criticality=vulnerability_model.criticality,
            )

            self.redis_repository.add_vulnerability(vulnerability)

            return vulnerability
        finally:
            session.close()

    def delete(self, cve: str) -> Optional[Vulnerability]:
        session = self.Session()
        try:
            vulnerability_model = session.query(
                VulnerabilityModel).filter_by(cve=cve).first()
            if not vulnerability_model:
                return None
            session.delete(vulnerability_model)
            session.commit()

            self.redis_repository.delete_vulnerability(cve)

            return Vulnerability(
                cve=vulnerability_model.cve,
                title=vulnerability_model.title,
                description=vulnerability_model.description,
                criticality=vulnerability_model.criticality,
            )
        finally:
            session.close()
