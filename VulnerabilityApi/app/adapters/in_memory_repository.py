from typing import List, Optional

from app.adapters.redis_repository import RedisRepository
from app.adapters.vulnerability_repository import VulnerabilityRepository
from app.models.models import Vulnerability


class InMemoryVulnerabilityRepository(VulnerabilityRepository):
    def __init__(self):
        self._db = {}
        self._redis_repository = RedisRepository()

    def create(self, vulnerability: Vulnerability) -> Vulnerability:
        if vulnerability.cve in self._db:
            raise ValueError("Vulnerability with this CVE already exists")
        self._db[vulnerability.cve] = vulnerability
        self._redis_repository.add_vulnerability(vulnerability)
        return vulnerability

    def get_all(self, title: Optional[str], min_criticality: Optional[int], max_criticality: Optional[int]) -> List[Vulnerability]:
        redis_results = self._redis_repository.search_vulnerabilities(
            title=title, min_criticality=min_criticality, max_criticality=max_criticality)

        if len(redis_results) > 0:
            return redis_results

        results = []
        for vulnerability in self._db.values():
            if title and title.lower() not in vulnerability.title.lower():
                continue
            if min_criticality is not None and vulnerability.criticality < min_criticality:
                continue
            if max_criticality is not None and vulnerability.criticality > max_criticality:
                continue
            results.append(vulnerability)

        return results

    def get_by_cve(self, cve: str) -> Optional[Vulnerability]:
        """Retrieve a vulnerability by its CVE."""
        return self._db.get(cve)

    def delete(self, cve: str) -> Optional[Vulnerability]:
        """Delete a vulnerability by its CVE and return the deleted object."""
        return self._db.pop(cve, None)
