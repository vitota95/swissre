from typing import List, Optional

import redis
from redis.commands.search.field import NumericField, TextField
from redis.commands.search.indexDefinition import IndexDefinition, IndexType

from app.models.models import Vulnerability


class RedisRepository:
    def __init__(self, redis_host: str = "localhost", redis_port: int = 6379):
        self.redis_client = redis.Redis(
            host=redis_host, port=redis_port, decode_responses=True
        )
        self.index_name = "vulnerability-index"
        self._create_index()

    def _create_index(self):
        """Create the RediSearch index if it doesn't already exist."""
        try:
            self.redis_client.ft(self.index_name).info()
        except redis.exceptions.ResponseError:
            self.redis_client.ft(self.index_name).create_index(
                fields=[
                    TextField("title"),
                    NumericField("criticality"),
                ],
                definition=IndexDefinition(
                    prefix=["vulnerability:"], index_type=IndexType.HASH
                ),
            )

    def add_vulnerability(self, vulnerability: Vulnerability):
        """Add a vulnerability to the Redis index."""
        self.redis_client.hset(
            f"vulnerability:{vulnerability.cve}",
            mapping={
                "title": vulnerability.title,
                "description": vulnerability.description,
                "criticality": vulnerability.criticality,
            },
        )

    def delete_vulnerability(self, cve: str):
        """Delete a vulnerability from Redis."""
        self.redis_client.delete(f"vulnerability:{cve}")

    def search_vulnerabilities(
        self, title: Optional[str], min_criticality: Optional[int], max_criticality: Optional[int]
    ) -> List[Vulnerability]:
        """Search vulnerabilities in Redis using RediSearch."""
        query = "*"
        if title:
            query = f"@title:{title}*"  # Search only in the title
        if min_criticality is not None or max_criticality is not None:
            criticality_filter = []
            if min_criticality is not None:
                criticality_filter.append(f"[{min_criticality} inf]")
            if max_criticality is not None:
                criticality_filter.append(f"[-inf {max_criticality}]")
            query += f" @criticality:{' '.join(criticality_filter)}"

        results = self.redis_client.ft(self.index_name).search(query)
        if not results.docs:
            return []

        return [
            Vulnerability(
                cve=doc.id.split(":")[1],
                title=doc.title,
                description=self.redis_client.hget(
                    f"vulnerability:{doc.id.split(':')[1]}", "description"
                ),
                criticality=int(doc.criticality),
            )
            for doc in results.docs
        ]
