from typing import List, Optional

import redis
from redis.commands.search.field import NumericField, TextField
from redis.commands.search.indexDefinition import IndexDefinition, IndexType

from app.models.configurations import RedisConfiguration
from app.models.models import Vulnerability


class RedisRepository:
    def __init__(self, redis_config: RedisConfiguration):
        self.redis_client = redis.Redis(
            host=redis_config.host, port=redis_config.port, decode_responses=True
        )
        self.index_name = "vulnerability-index"
        self._create_index()

    def _create_index(self):
        try:
            self.redis_client.ft(self.index_name).info()
        except redis.exceptions.ResponseError:
            self.redis_client.ft(self.index_name).create_index(
                fields=[
                    TextField("title"),
                    NumericField("criticality"),
                ],
                definition=IndexDefinition(
                    prefix=["vulnerability:"], index_type=IndexType.HASH
                ),
            )

    def add_vulnerability(self, vulnerability: Vulnerability):
        self.redis_client.hset(
            f"vulnerability:{vulnerability.cve}",
            mapping={
                "title": vulnerability.title,
                "description": vulnerability.description,
                "criticality": vulnerability.criticality,
            },
        )

    def delete_vulnerability(self, cve: str):
        self.redis_client.delete(f"vulnerability:{cve}")

    def search_vulnerabilities(
        self, title: Optional[str], min_criticality: Optional[int], max_criticality: Optional[int]
    ) -> List[Vulnerability]:
        query = self.__add_title_query(title)
        query = self.__add_criticality_query(
            query, min_criticality, max_criticality)

        if query == "":
            query = "*"

        results = self.redis_client.ft(self.index_name).search(query)
        if not results.docs:
            return []

        return [
            Vulnerability(
                cve=doc.id.split(":")[1],
                title=doc.title,
                description=self.redis_client.hget(
                    f"vulnerability:{doc.id.split(':')[1]}", "description"
                ),
                criticality=int(doc.criticality),
            )
            for doc in results.docs
        ]

    def __add_criticality_query(self, query, min_criticality, max_criticality):
        if min_criticality is not None or max_criticality is not None:
            if min_criticality is None:
                min_criticality = "-inf"
            if max_criticality is None:
                max_criticality = "inf"
            query += f" @criticality:[{min_criticality} {max_criticality}]"
        return query

    def __add_title_query(self, title):
        if title:
            return f"@title:{title}*"
        return ""
