from typing import List, Optional

from VulnerabilityApi.adapters.vulnerability_repository import VulnerabilityRepository
from VulnerabilityApi.models.models import Vulnerability


class InMemoryVulnerabilityRepository(VulnerabilityRepository):
    def __init__(self):
        self._db = {}

    def create(self, vulnerability: Vulnerability) -> Vulnerability:
        if vulnerability.cve in self._db:
            raise ValueError("Vulnerability with this CVE already exists")
        self._db[vulnerability.cve] = vulnerability
        return vulnerability

    def get_all(self, title: Optional[str], min_criticality: Optional[int], max_criticality: Optional[int]) -> List[Vulnerability]:
        results = list(self._db.values())
        if title:
            results = [v for v in results if title.lower() in v.title.lower()]
        if min_criticality is not None:
            results = [v for v in results if v.criticality >= min_criticality]
        if max_criticality is not None:
            results = [v for v in results if v.criticality <= max_criticality]
        return results

    def get_by_cve(self, cve: str) -> Optional[Vulnerability]:
        """Retrieve a vulnerability by its CVE."""
        return self._db.get(cve)

    def delete(self, cve: str) -> Optional[Vulnerability]:
        """Delete a vulnerability by its CVE and return the deleted object."""
        return self._db.pop(cve, None)
