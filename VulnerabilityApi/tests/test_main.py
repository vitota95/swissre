import pytest
from fastapi.testclient import TestClient

from VulnerabilityApi.main import app

client = TestClient(app)

# Sample data for testing
sample_vulnerabilities = [
    {
        "title": "Sample Vulnerability 1",
        "cve": "CVE-2023-1234",
        "criticality": 5,
        "description": "This is the first sample vulnerability."
    },
    {
        "title": "Another Vulnerability",
        "cve": "CVE-2023-5678",
        "criticality": 8,
        "description": "This is another sample vulnerability."
    },
    {
        "title": "Low Criticality Vulnerability",
        "cve": "CVE-2023-9101",
        "criticality": 2,
        "description": "This vulnerability has low criticality."
    }
]


@pytest.fixture
def create_sample_vulnerabilities():
    """Fixture to create multiple sample vulnerabilities before each test."""
    for vulnerability in sample_vulnerabilities:
        client.post("/vulnerability", json=vulnerability)


@pytest.mark.parametrize(
    "filter_params,expected_count",
    [
        ({"title": "Sample"}, 1),
        ({"min_criticality": 3}, 2),
        ({"max_criticality": 5}, 2),
        ({"min_criticality": 3, "max_criticality": 7}, 1),
        ({"title": "Nonexistent"}, 0),
    ],
)
def test_get_vulnerabilities_with_filters(create_sample_vulnerabilities, filter_params, expected_count):
    """Test the GET /vulnerability endpoint with various filters."""
    response = client.get("/vulnerability", params=filter_params)
    if expected_count == 0:
        assert response.status_code == 404
        assert response.json()["detail"] == "No vulnerabilities found"
    else:
        assert response.status_code == 200
        assert len(response.json()) == expected_count


def test_get_vulnerabilities_combined_filters(create_sample_vulnerabilities):
    """Test the GET /vulnerability endpoint with combined filters."""
    response = client.get(
        "/vulnerability",
        params={"title": "Vulnerability",
                "min_criticality": 3, "max_criticality": 8},
    )
    assert response.status_code == 200
    assert len(response.json()) == 2
    assert response.json()[0]["cve"] == "CVE-2023-1234"
    assert response.json()[1]["cve"] == "CVE-2023-5678"
