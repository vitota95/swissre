import pytest
from fastapi.testclient import TestClient

from VulnerabilityApi.main import app

client = TestClient(app)

# Sample data for testing
sample_vulnerabilities = [
    {
        "title": "Sample Vulnerability 1",
        "cve": "CVE-2023-1234",
        "criticality": 5,
        "description": "This is the first sample vulnerability."
    },
    {
        "title": "Another Vulnerability",
        "cve": "CVE-2023-5678",
        "criticality": 8,
        "description": "This is another sample vulnerability."
    },
    {
        "title": "Low Criticality Vulnerability",
        "cve": "CVE-2023-9101",
        "criticality": 2,
        "description": "This vulnerability has low criticality."
    }
]


@pytest.fixture
def create_sample_vulnerabilities():
    """Fixture to create multiple sample vulnerabilities before each test."""
    for vulnerability in sample_vulnerabilities:
        client.post("/vulnerability", json=vulnerability)


@pytest.mark.parametrize(
    "invalid_vulnerability,expected_status,expected_loc,expected_msg",
    [
        # Invalid CVE format
        (
            {
                "title": "Invalid CVE Vulnerability",
                "cve": "INVALID-CVE",
                "criticality": 5,
                "description": "This vulnerability has an invalid CVE format."
            },
            422,
            ["body", "cve"],
            "Value error, CVE must match the pattern CVE-YYYY-NNNN or CVE-YYYY-NNNNNNN"
        ),
        # Missing required field (cve)
        (
            {
                "title": "Incomplete Vulnerability",
                # Missing "cve"
                "criticality": 5,
                "description": "This vulnerability is missing the CVE field."
            },
            422,
            ["body", "cve"],
            "Field required"
        ),
        # Criticality out of range
        (
            {
                "title": "Invalid Criticality",
                "cve": "CVE-2023-9999",
                "criticality": 15,  # Out of range
                "description": "This vulnerability has an invalid criticality value."
            },
            422,
            ["body", "criticality"],
            "Input should be less than or equal to 10"
        ),
    ],
)
def test_create_vulnerability_invalid_data(
    invalid_vulnerability, expected_status, expected_loc, expected_msg
):
    """Test the POST /vulnerability endpoint with various invalid data."""
    response = client.post("/vulnerability", json=invalid_vulnerability)
    assert response.status_code == expected_status
    assert response.json()["detail"][0]["loc"] == expected_loc
    assert expected_msg in response.json()["detail"][0]["msg"]


@pytest.mark.parametrize(
    "filter_params,expected_count",
    [
        ({"title": "Sample"}, 1),
        ({"min_criticality": 3}, 2),
        ({"max_criticality": 5}, 2),
        ({"min_criticality": 3, "max_criticality": 7}, 1),
        ({"title": "Nonexistent"}, 0),
    ],
)
def test_get_vulnerabilities_with_filters(create_sample_vulnerabilities, filter_params, expected_count):
    """Test the GET /vulnerability endpoint with various filters."""
    response = client.get("/vulnerability", params=filter_params)
    response_json = response.json()
    if expected_count == 0:
        assert response.status_code == 404
        assert response_json["detail"] == "No vulnerabilities found"
    else:
        assert response.status_code == 200
        assert len(response_json) == expected_count


def test_get_vulnerabilities_combined_filters(create_sample_vulnerabilities):
    """Test the GET /vulnerability endpoint with combined filters."""
    response = client.get(
        "/vulnerability",
        params={"title": "Vulnerability",
                "min_criticality": 3, "max_criticality": 8},
    )
    response_json = response.json()
    assert response.status_code == 200
    assert len(response_json) == 2
    assert response_json[0]["cve"] == "CVE-2023-1234"
    assert response_json[1]["cve"] == "CVE-2023-5678"


@pytest.mark.parametrize(
    "cve,expected_status,expected_response",
    [
        # Existing CVE
        ("CVE-2023-1234", 200, {
            "title": "Sample Vulnerability 1",
            "cve": "CVE-2023-1234",
            "criticality": 5,
            "description": "This is the first sample vulnerability."
        }),
        # Non-existent CVE
        ("CVE-9999-9999", 404, {"detail": "Vulnerability not found"}),
    ],
)
def test_get_vulnerability_by_cve_parametrized(create_sample_vulnerabilities, cve, expected_status, expected_response):
    """Test the GET /vulnerability/{cve} endpoint with parameterized inputs."""
    response = client.get(f"/vulnerability/{cve}")
    assert response.status_code == expected_status
    assert response.json() == expected_response


@pytest.mark.parametrize(
    "cve,expected_status,expected_response",
    [
        # Existing CVE
        ("CVE-2023-1234", 200, {
            "title": "Sample Vulnerability 1",
            "cve": "CVE-2023-1234",
            "criticality": 5,
            "description": "This is the first sample vulnerability."
        }),
        # Non-existent CVE
        ("CVE-9999-9999", 404, {"detail": "Vulnerability not found"}),
    ],
)
def test_delete_vulnerability_parametrized(create_sample_vulnerabilities, cve, expected_status, expected_response):
    """Test the DELETE /vulnerability/{cve} endpoint with parameterized inputs."""
    response = client.delete(f"/vulnerability/{cve}")
    assert response.status_code == expected_status
    assert response.json() == expected_response

    # If the CVE was successfully deleted, verify it no longer exists
    if expected_status == 200:
        response = client.get(f"/vulnerability/{cve}")
        assert response.status_code == 404
        assert response.json() == {"detail": "Vulnerability not found"}
