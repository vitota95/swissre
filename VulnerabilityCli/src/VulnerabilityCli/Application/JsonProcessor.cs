using System.Text.Json;
using System.Text.RegularExpressions;
using VulnerabilityCli.Models;

namespace VulnerabilityCli.Application;

public class JsonProcessor
{
    private static JsonSerializerOptions _jsonSerializerOptions = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };

    public static VulnerabilityData? DeserializeAndValidate(string filePath)
    {
        try
        {
            var jsonContent = File.ReadAllText(filePath);

            var data = JsonSerializer.Deserialize<VulnerabilityData>(jsonContent, _jsonSerializerOptions);

            if (data == null || data.Vulnerabilities == null)
            {
                throw new Exception("The JSON file does not contain valid data.");
            }

            var validVulnerabilities = GetValidVulnerabilities(data);
            var vulnerabilityData = new VulnerabilityData(validVulnerabilities);
            
            return vulnerabilityData;
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON parsing error: {ex.Message}");
            throw;
        }
        catch (FileNotFoundException ex )
        {
            Console.WriteLine($"Could not find file {filePath}", ex);
            throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            throw;
        }
    }

    private static List<Vulnerability> GetValidVulnerabilities(VulnerabilityData data)
    {
        var validVulnerabilities = new List<Vulnerability>();
        foreach (var vulnerability in data.Vulnerabilities)
        {
            if (IsValidVulnerability(vulnerability))
            {
                validVulnerabilities.Add(vulnerability);
            }
            else
            {
                Console.WriteLine($"Invalid vulnerability skipped: {JsonSerializer.Serialize(vulnerability)}");
            }
        }

        return validVulnerabilities;
    }


    private static bool IsValidVulnerability(Vulnerability vulnerability)
    {
        if (string.IsNullOrEmpty(vulnerability.Title) || vulnerability.Title.Length > 30) 
        {
            Console.WriteLine($"Invalid title {vulnerability.Title} vulnerability removed");
            return false;
        }

        if (string.IsNullOrEmpty(vulnerability.Cve) || !Regex.IsMatch(vulnerability.Cve, @"^CVE-\d{4}-\d{4,7}$")) 
        {
            Console.WriteLine($"Invalid Cve {vulnerability.Cve} vulnerability removed");
            return false;
        }

        if (vulnerability.Criticality < 0 || vulnerability.Criticality > 10) 
        {
            Console.WriteLine($"Invalid Criticality {vulnerability.Criticality} vulnerability removed");
            return false;
        }

        if (!string.IsNullOrEmpty(vulnerability.Description) && vulnerability.Description.Length > 100) 
        {
            Console.WriteLine($"Invalid Description {vulnerability.Description} vulnerability removed");
            return false;
        }

        return true;
    }
}