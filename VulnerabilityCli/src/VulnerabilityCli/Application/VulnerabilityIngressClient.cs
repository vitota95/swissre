using System.Text;
using System.Text.Json;
using VulnerabilityCli.Models;

namespace VulnerabilityCli.Application;

public class VulnerabilityIngressClient
{
    private readonly IHttpClientFactory _httpClientFactory;

    public VulnerabilityIngressClient(IHttpClientFactory httpClientFactory)
    {
        _httpClientFactory = httpClientFactory;
    }

    public async Task PostVulnerabilityDataAsync(VulnerabilityData vulnerabilityData, string baseUrl)
    {
        var httpClient = _httpClientFactory.CreateClient();
        var endpoint = $"{baseUrl}/vulnerability";

        var isAlive = false;
        do {
            isAlive = await CheckClientIsAlive(httpClient, baseUrl);

            if (!isAlive) 
            {
                Thread.Sleep(1000);
            }
        }
        while(!isAlive);

        try
        {
            foreach (var vulnerability in vulnerabilityData.Vulnerabilities)
            {
                var jsonContent = JsonSerializer.Serialize(vulnerability);
                var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
                var response = await httpClient.PostAsync(endpoint, content);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Vulnerability data posted successfully to {endpoint}.");
                }
                else
                {
                    Console.WriteLine($"Failed to post vulnerability data. Status code: {response.StatusCode}");
                }
            }

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP error occurred: {ex.Message}");
            throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
            throw;
        }
    }

    private static async Task<bool> CheckClientIsAlive(HttpClient httpClient, string baseUrl) 
    {
        try {
            var endpoint = $"{baseUrl}/vulnerability";
            var result = await httpClient.GetAsync(endpoint);
            return result.IsSuccessStatusCode;
        }
        catch(Exception) 
        {
            return false;
        }
    }
}