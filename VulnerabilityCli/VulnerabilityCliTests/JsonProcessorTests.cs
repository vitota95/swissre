using VulnerabilityCli.Application;

namespace VulnerabilityCliTests;

[TestFixture]
public class JsonProcessorTests
{
    private const string FilesDirectory = @"files/";

    [Test]
    public void DeserializeAndValidate_WhenFileHasTenElements_ThenReturnsAllValidEntries()
    {
        // Arrange
        var filePath = FilesDirectory + "ten_elements.json";

        // Act
        var result = JsonProcessor.DeserializeAndValidate(filePath);

        // Assert
        Assert.That(result, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Has.Count.EqualTo(10));
    }

    [Test]
    public void DeserializeAndValidate_WhenFileHasZeroElements_ThenReturnsEmptyList()
    {
        // Arrange
        var filePath = FilesDirectory + "zero_elements.json";

        // Act
        var result = JsonProcessor.DeserializeAndValidate(filePath);

        // Assert
        Assert.That(result, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Has.Count.EqualTo(0));
    }

    [Test]
    public void DeserializeAndValidate_WhenFileHasOneElement_ThenReturnsSingleEntry()
    {
        // Arrange
        var filePath = FilesDirectory + "one_element.json";

        // Act
        var result = JsonProcessor.DeserializeAndValidate(filePath);

        // Assert
        Assert.That(result, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Has.Count.EqualTo(1));
    }

    [Test]
    public void DeserializeAndValidate_WhenInvalidFilePath_ThenThrows()
    {
        // Arrange
        var filePath = "invalid";

        // Act & Assert
        Assert.Throws<FileNotFoundException>(() =>
        {
            JsonProcessor.DeserializeAndValidate(filePath);
        });
    }

    [Test]
    public void DeserializeAndValidate_WhenFileIsEmpty_ThenThrowsException()
    {
        // Arrange
        var filePath = FilesDirectory + "empty.json";

        // Act
        var ex = Assert.Throws<System.Exception>(() =>
        {
            JsonProcessor.DeserializeAndValidate(filePath);
        });

        // Assert
        Assert.That(ex.Message, Is.EqualTo("The JSON file does not contain valid data."));
    }

    [Test]
    public void DeserializeAndValidate_WhenFileHasInvalidJson_ThenThrowsJsonException()
    {
        // Arrange
        var invalidJsonContent = "{ invalid json }"; // Invalid JSON content
        var tempFilePath = Path.GetTempFileName();
        File.WriteAllText(tempFilePath, invalidJsonContent);

        try
        {
            // Act & Assert
            Assert.Throws<System.Text.Json.JsonException>(() =>
            {
                JsonProcessor.DeserializeAndValidate(tempFilePath);
            });
        }
        finally
        {
            // Cleanup
            if (File.Exists(tempFilePath))
            {
                File.Delete(tempFilePath);
            }
        }
    }

    [Test]
    public void DeserializeAndValidate_WhenInvalidVulnerabilities_ThenReturnsEmpty()
    {
        // Arrange
        var filePath = FilesDirectory + "invalid_vulnerabilities.json";

        // Act
        var result = JsonProcessor.DeserializeAndValidate(filePath);

        // Assert
        Assert.That(result, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Is.Not.EqualTo(null));
        Assert.That(result.Vulnerabilities, Has.Count.EqualTo(0));
    }
}